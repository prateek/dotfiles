{
  "Print to console": {
    "prefix": "psf",
    "body": ["println(fmt.Sprintf(\"$1\"))"],
    "description": "Print output to console"
  },
  "Test controller": {
    "prefix": "ctrl",
    "body": [
      "ctrl := gomock.NewController(xtest.Reporter{t})",
      "defer ctrl.Finish()"
    ],
    "description": "Add test mock controller"
  },
  "Leaktest": {
    "prefix": "leak",
    "body": ["defer leaktest.CheckTimeout(t, time.Second)()"],
    "description": "Add leaktest check"
  },
  "Prop Test": {
    "prefix": "proptest",
    "body": [
      "func TestSamplePropTest(t *testing.T) {",
      "\tparameters := gopter.DefaultTestParameters()",
      "\tseed := time.Now().UnixNano()",
      "\tparameters.MinSuccessfulTests = 100",
      "\tparameters.MaxSize = 40",
      "\tparameters.Rng = rand.New(rand.NewSource(seed))",
      "\tproperties := gopter.NewProperties(parameters)",
      "",
      "\tproperties.Property(\"Property\", prop.ForAll(",
      "\t\tfunc(x int) (bool, error) {",
      "\t\t\treturn false, nil",
      "\t\t},",
      "\t\tgen.Int32(),",
      "\t))",
      "",
      "\treporter := gopter.NewFormatedReporter(true, 160, os.Stdout)",
      "\tif !properties.Run(reporter) {",
      "\t\tt.Errorf(\"failed with initial seed: %d\", seed)",
      "\t}",
      "}"
    ],
    "description": "Property-based test template with gopter"
  }
}
